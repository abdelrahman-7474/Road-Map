int CountryGraph::FloydWarshall2(string start_city, string dist_city) {
    // Create a distance map to store all shortest paths
    unordered_map<string, unordered_map<string, int>> distance;

    // Create a predecessor map to reconstruct the shortest paths
    unordered_map<string, unordered_map<string, string>> predecessor_city;

    // Initialize the distance and predecessor maps with the graph data
    for (const auto& city : cities) {
        distance[city.first] = unordered_map<string, int>();
        predecessor_city[city.first] = unordered_map<string, string>();
        for (const auto& edge : city.second) {
            distance[city.first][edge.destination_city] = edge.cost;
            predecessor_city[city.first][edge.destination_city] = city.first;
        }
        // Set distance to self to 0 and to unconnected cities to infinity
        distance[city.first][city.first] = 0;
        for (const auto& otherCity : cities) {
            if (distance[city.first].count(otherCity.first) == 0) {
                distance[city.first][otherCity.first] = INT_MAX;
                predecessor_city[city.first][otherCity.first] = ""; // No path initially
            }
        }
    }

    // Relax all edges by considering intermediate vertices
    for (const auto& intermediate_city : cities) {
        for (const auto& source_city : cities) {
            for (const auto& destination_city : cities) {
                // If there's a shorter path through the intermediate vertex, update the distance and predecessor
                if (distance[source_city.first][intermediate_city.first] != INT_MAX &&
                    distance[intermediate_city.first][destination_city.first] != INT_MAX &&
                    distance[source_city.first][intermediate_city.first] + distance[intermediate_city.first][destination_city.first] < distance[source_city.first][destination_city.first]) {
                    distance[source_city.first][destination_city.first] = distance[source_city.first][intermediate_city.first] + distance[intermediate_city.first][destination_city.first];
                    predecessor_city[source_city.first][destination_city.first] = predecessor_city[intermediate_city.first][destination_city.first];
                }
            }
        }
    }

    // Get the distance between the start and destination city
    int dist = distance[start_city][dist_city];

    // Print the shortest path
    cout << "Shortest path from " << start_city << " to " << dist_city << ":" << endl;
    if (dist == INT_MAX) {
        cout << "No path exists." << endl;
    } else {
        vector<string> path;
        string next_city = dist_city;
        while (next_city != "") {
            path.push_back(next_city);
            next_city = predecessor_city[start_city][next_city];
        }
        reverse(path.begin(), path.end());
        for (const auto& city : path) {
            cout << city;
            if (city != dist_city) {
                cout << " -> ";
            }
        }
        
    }

    return dist;
}